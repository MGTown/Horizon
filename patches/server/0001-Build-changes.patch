From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: TsubakiDev <i@tsubakidev.cc>
Date: Fri, 16 Aug 2024 13:15:00 +0800
Subject: [PATCH] Build changes


diff --git a/build.gradle.kts b/build.gradle.kts
index 97a4a54dfa74df7aafd9df5a0f2fdac72471c2d5..ae79210591fab254f6c8d148b926de676d8ec2cf 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -13,7 +13,7 @@ configurations.named(log4jPlugins.compileClasspathConfigurationName) {
 val alsoShade: Configuration by configurations.creating
 
 dependencies {
-    implementation(project(":purpur-api")) // Pufferfish // Paper // Purpur
+    implementation(project(":horizon-api")) // Pufferfish // Paper // Purpur // Horizon
     // Paper start
     implementation("org.jline:jline-terminal-jansi:3.21.0")
     implementation("net.minecrell:terminalconsoleappender:1.3.0")
@@ -103,14 +103,14 @@ tasks.jar {
         val gitBranch = git("rev-parse", "--abbrev-ref", "HEAD").getText().trim() // Paper
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
-            "Implementation-Title" to "Purpur", // Pufferfish // Purpur
+            "Implementation-Title" to "Horizon", // Pufferfish // Purpur // Horizon
             "Implementation-Version" to implementationVersion,
             "Implementation-Vendor" to date, // Paper
-            "Specification-Title" to "Purpur", // Pufferfish // Purpur
+            "Specification-Title" to "Horizon", // Pufferfish // Purpur // Horizon
             "Specification-Version" to project.version,
-            "Specification-Vendor" to "Purpur Team", // Pufferfish // Purpur
-            "Brand-Id" to "purpurmc:purpur", // Pufferfish // Purpur
-            "Brand-Name" to "Purpur", // Pufferfish // Purpur
+            "Specification-Vendor" to "MGTown Development Team", // Pufferfish // Purpur // Horizon
+            "Brand-Id" to "mgtown:horizon", // Pufferfish // Purpur // Horizon
+            "Brand-Name" to "Horizon", // Pufferfish // Purpur // Horizon
             "Build-Number" to (build ?: ""),
             "Build-Time" to Instant.now().toString(),
             "Git-Branch" to gitBranch, // Paper
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 8cde30544e14f8fc2dac32966ae3c21f8cf3a551..efa0346123579c81f8da6276f38caac2b0b58002 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -593,7 +593,7 @@ public class Metrics {
             boolean logFailedRequests = config.getBoolean("logFailedRequests", false);
             // Only start Metrics, if it's enabled in the config
             if (config.getBoolean("enabled", true)) {
-                Metrics metrics = new Metrics("Purpur", serverUUID, logFailedRequests, Bukkit.getLogger()); // Pufferfish // Purpur
+                Metrics metrics = new Metrics("Horizon", serverUUID, logFailedRequests, Bukkit.getLogger()); // Pufferfish // Purpur // Horizon
 
                 metrics.addCustomChart(new Metrics.SimplePie("minecraft_version", () -> {
                     String minecraftVersion = Bukkit.getVersion();
@@ -603,7 +603,7 @@ public class Metrics {
 
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode() ? "bungee" : "offline"))); // Purpur
-                metrics.addCustomChart(new Metrics.SimplePie("purpur_version", () -> (org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion() != null) ? org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion() : "unknown")); // Purpur
+                metrics.addCustomChart(new Metrics.SimplePie("horizon_version", () -> (org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion() != null) ? org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion() : "unknown")); // Purpur // Horizon
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
                     Map<String, Map<String, Integer>> map = new HashMap<>();
diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
index 6d36fc6d8e22d9b68dea3830f6ecc8763184c343..f8fe4247510633e3e71983e17baab0814df3d488 100644
--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -52,7 +52,7 @@ public class PaperVersionFetcher implements VersionFetcher {
         if (build.buildNumber().isEmpty() && build.gitCommit().isEmpty()) {
             updateMessage = text("You are running a development version without access to version information", color(0xFF5300));
         } else {
-            updateMessage = getUpdateStatusMessage("PurpurMC/Purpur", build); // Purpur
+            updateMessage = getUpdateStatusMessage("MGTown/Horizon", build); // Purpur // Horizon
         }
         final @Nullable Component history = this.getHistory();
 
@@ -62,27 +62,31 @@ public class PaperVersionFetcher implements VersionFetcher {
     private static Component getUpdateStatusMessage(final String repo, final ServerBuildInfo build) {
         //int distance = DISTANCE_ERROR; // Purpur - use field
 
-        final OptionalInt buildNumber = build.buildNumber();
-        if (buildNumber.isPresent()) {
-            distance = fetchDistanceFromSiteApi(build, buildNumber.getAsInt());
-        } else {
+        // Horizon start
+//        final OptionalInt buildNumber = build.buildNumber();
+//        if (buildNumber.isPresent()) {
+//            distance = fetchDistanceFromSiteApi(build, buildNumber.getAsInt());
+//        } else {
             final Optional<String> gitBranch = build.gitBranch();
             final Optional<String> gitCommit = build.gitCommit();
             if (gitBranch.isPresent() && gitCommit.isPresent()) {
                 distance = fetchDistanceFromGitHub(repo, gitBranch.get(), gitCommit.get());
             }
-        }
+//        }
+        // Horizon end
 
         return switch (distance) {
             case DISTANCE_ERROR -> text("* Error obtaining version information", NamedTextColor.RED); // Purpur
             case 0 -> text("* You are running the latest version", NamedTextColor.GREEN); // Purpur
             case DISTANCE_UNKNOWN -> text("* Unknown version", NamedTextColor.YELLOW); // Purpur
-            default -> text("* You are " + distance + " version(s) behind", NamedTextColor.YELLOW) // Purpur
-                .append(Component.newline())
-                .append(text("Download the new version at: ")
-                    .append(text(DOWNLOAD_PAGE, NamedTextColor.GOLD)
-                        .hoverEvent(text("Click to open", NamedTextColor.WHITE))
-                        .clickEvent(ClickEvent.openUrl(DOWNLOAD_PAGE))));
+            default -> text("* You are " + distance + " version(s) behind", NamedTextColor.YELLOW); // Purpur
+            // Horizon start
+//                .append(Component.newline())
+//                .append(text("Download the new version at: ")
+//                    .append(text(DOWNLOAD_PAGE, NamedTextColor.GOLD)
+//                        .hoverEvent(text("Click to open", NamedTextColor.WHITE))
+//                        .clickEvent(ClickEvent.openUrl(DOWNLOAD_PAGE))));
+            // Horizon end
         };
     }
 
diff --git a/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java b/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java
index 3099c21ee589acf6edff5903a23673adf489024f..54bca9bd7a85be4b25be43781df862583a92c624 100644
--- a/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java
+++ b/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java
@@ -33,6 +33,7 @@ public record ServerBuildInfoImpl(
     private static final String BRAND_PAPER_NAME = "Paper";
     private static final String BRAND_PUFFERFISH_NAME = "Pufferfish"; // Purpur
     private static final String BRAND_PURPUR_NAME = "Purpur"; // Purpur
+    private static final String BRAND_HORIZON_NAME = "Horizon"; // Horizon
 
     private static final String BUILD_DEV = "DEV";
 
@@ -44,9 +45,9 @@ public record ServerBuildInfoImpl(
         this(
             getManifestAttribute(manifest, ATTRIBUTE_BRAND_ID)
                 .map(Key::key)
-                .orElse(BRAND_PURPUR_ID), // Purpur
+                .orElse(BRAND_HORIZON_ID), // Purpur // Horizon
             getManifestAttribute(manifest, ATTRIBUTE_BRAND_NAME)
-                .orElse(BRAND_PURPUR_NAME), // Purpur
+                .orElse(BRAND_HORIZON_NAME), // Purpur // Horizon
             SharedConstants.getCurrentVersion().getId(),
             SharedConstants.getCurrentVersion().getName(),
             getManifestAttribute(manifest, ATTRIBUTE_BUILD_NUMBER)
@@ -63,7 +64,7 @@ public record ServerBuildInfoImpl(
 
     @Override
     public boolean isBrandCompatible(final @NotNull Key brandId) {
-        return brandId.equals(this.brandId) || brandId.equals(BRAND_PAPER_ID) || brandId.equals(BRAND_PUFFERFISH_ID); // Purpur
+        return brandId.equals(this.brandId) || brandId.equals(BRAND_PAPER_ID) || brandId.equals(BRAND_PUFFERFISH_ID) || brandId.equals(BRAND_PURPUR_ID); // Purpur // Horizon
     }
 
     @Override
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index f51cc3de3ca935ef90f7f0e9dd0506b856fc55f3..619bc74e8fad75f1e0ce7476b2b903d02f36edde 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -155,14 +155,14 @@ public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThre
                 if (isLongTimeout) {
                 // Paper end
                 log.log( Level.SEVERE, "------------------------------" );
-                log.log( Level.SEVERE, "The server has stopped responding! This is (probably) not a Purpur bug." ); // Paper // Purpur
+                log.log( Level.SEVERE, "The server has stopped responding! This is (probably) not a Horizon bug." ); // Paper // Purpur // Horizon
                 log.log( Level.SEVERE, "If you see a plugin in the Server thread dump below, then please report it to that author" );
                 log.log( Level.SEVERE, "\t *Especially* if it looks like HTTP or MySQL operations are occurring" );
                 log.log( Level.SEVERE, "If you see a world save or edit, then it means you did far more than your server can handle at once" );
                 log.log( Level.SEVERE, "\t If this is the case, consider increasing timeout-time in spigot.yml but note that this will replace the crash with LARGE lag spikes" );
-                log.log( Level.SEVERE, "If you are unsure or still think this is a Purpur bug, please report this to https://github.com/PurpurMC/Purpur/issues" ); // Purpur
+                log.log( Level.SEVERE, "If you are unsure or still think this is a Horizon bug, please report this to https://github.com/MGTown/Horizon/issues" ); // Purpur // Horizon
                 log.log( Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports" );
-                log.log( Level.SEVERE, "Purpur version: " + Bukkit.getServer().getVersion() ); // Purpur
+                log.log( Level.SEVERE, "Horizon version: " + Bukkit.getServer().getVersion() ); // Purpur // Horizon
                 //
                 if ( net.minecraft.world.level.Level.lastPhysicsProblem != null )
                 {
@@ -184,12 +184,12 @@ public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThre
                 // Paper end
                 } else
                 {
-                    log.log(Level.SEVERE, "--- DO NOT REPORT THIS TO PURPUR - THIS IS NOT A BUG OR A CRASH  - " + Bukkit.getServer().getVersion() + " ---"); // Purpur
+                    log.log(Level.SEVERE, "--- DO NOT REPORT THIS TO HORIZON - THIS IS NOT A BUG OR A CRASH  - " + Bukkit.getServer().getVersion() + " ---"); // Purpur // Horizon
                     log.log(Level.SEVERE, "The server has not responded for " + (currentTime - lastTick) / 1000 + " seconds! Creating thread dump");
                 }
                 // Paper end - Different message for short timeout
                 log.log( Level.SEVERE, "------------------------------" );
-                log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Purpur!):" ); // Paper // Purpur
+                log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Horizon!):" ); // Paper // Purpur // Horizon
                 ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler.dumpAllChunkLoadInfo(MinecraftServer.getServer(), isLongTimeout); // Paper - rewrite chunk system
                 this.dumpTickingInfo(); // Paper - log detailed tick information
                 WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
@@ -205,7 +205,7 @@ public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThre
                     WatchdogThread.dumpThread( thread, log );
                 }
                 } else {
-                    log.log(Level.SEVERE, "--- DO NOT REPORT THIS TO PURPUR - THIS IS NOT A BUG OR A CRASH ---"); // Purpur
+                    log.log(Level.SEVERE, "--- DO NOT REPORT THIS TO HORIZON - THIS IS NOT A BUG OR A CRASH ---"); // Purpur // Horizon
                 }
 
                 log.log( Level.SEVERE, "------------------------------" );
